/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/render/api';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from '../services/bing-maps-api-wrapper';
import * as import4 from './bing-map';
import * as import5 from '../services/marker-manager';
import * as import6 from '../services/info-window-manager';
import * as import7 from '@angular/core/src/linker/view_utils';
import * as import8 from '@angular/core/src/di/injector';
import * as import9 from '@angular/core/src/linker/view_type';
import * as import10 from '@angular/core/src/change_detection/change_detection';
import * as import11 from '@angular/core/src/zone/ng_zone';
import * as import12 from '../services/maps-api-loader/maps-api-loader';
import * as import13 from '../services/maps-api-loader/lazy-maps-api-loader';
import * as import14 from '@angular/core/src/linker/element_ref';
import * as import15 from '@angular/core/src/metadata/view';
import * as import16 from '@angular/core/src/linker/component_factory';
var renderType_BingMap_Host:import0.RenderComponentType = (null as any);
class _View_BingMap_Host0 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import2.AppElement;
  _BingMapsAPIWrapper_0_4:import3.BingMapsAPIWrapper;
  _BingMap_0_5:import4.BingMap;
  __MarkerManager_0_6:import5.MarkerManager;
  __InfoWindowManager_0_7:import6.InfoWindowManager;
  /*private*/ _expr_0:any;
  constructor(viewUtils:import7.ViewUtils,parentInjector:import8.Injector,declarationEl:import2.AppElement) {
    super(_View_BingMap_Host0,renderType_BingMap_Host,import9.ViewType.HOST,viewUtils,parentInjector,declarationEl,import10.ChangeDetectorStatus.CheckAlways);
  }
  get _MarkerManager_0_6():import5.MarkerManager {
    if ((this.__MarkerManager_0_6 == (null as any))) { (this.__MarkerManager_0_6 = new import5.MarkerManager(this._BingMapsAPIWrapper_0_4,this.parentInjector.get(import11.NgZone))); }
    return this.__MarkerManager_0_6;
  }
  get _InfoWindowManager_0_7():import6.InfoWindowManager {
    if ((this.__InfoWindowManager_0_7 == (null as any))) { (this.__InfoWindowManager_0_7 = new import6.InfoWindowManager(this._BingMapsAPIWrapper_0_4,this.parentInjector.get(import11.NgZone))); }
    return this.__InfoWindowManager_0_7;
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.selectOrCreateHostElement('bing-map',rootSelector,(null as any));
    this._appEl_0 = new import2.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_BingMap0(this.viewUtils,this.injector(0),this._appEl_0);
    this._BingMapsAPIWrapper_0_4 = new import3.BingMapsAPIWrapper(this.parentInjector.get(import12.MapsAPILoader),this.parentInjector.get(import11.NgZone),this.parentInjector.get(import13.LazyMapsAPILoaderConfig));
    this._BingMap_0_5 = new import4.BingMap(new import14.ElementRef(this._el_0),this._BingMapsAPIWrapper_0_4);
    this._appEl_0.initComponent(this._BingMap_0_5,[],compView_0);
    compView_0.create(this._BingMap_0_5,this.projectableNodes,(null as any));
    this._expr_0 = import10.UNINITIALIZED;
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.BingMapsAPIWrapper) && (0 === requestNodeIndex))) { return this._BingMapsAPIWrapper_0_4; }
    if (((token === import4.BingMap) && (0 === requestNodeIndex))) { return this._BingMap_0_5; }
    if (((token === import5.MarkerManager) && (0 === requestNodeIndex))) { return this._MarkerManager_0_6; }
    if (((token === import6.InfoWindowManager) && (0 === requestNodeIndex))) { return this._InfoWindowManager_0_7; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (((this.numberOfChecks === 0) && !throwOnChange)) { this._BingMap_0_5.ngOnInit(); }
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_0:any = true;
    if (import7.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementClass(this._el_0,'bing-map-container',currVal_0);
      this._expr_0 = currVal_0;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_BingMap_Host0(viewUtils:import7.ViewUtils,parentInjector:import8.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  if ((renderType_BingMap_Host === (null as any))) { (renderType_BingMap_Host = viewUtils.createRenderComponentType('',0,import15.ViewEncapsulation.None,[],{})); }
  return new _View_BingMap_Host0(viewUtils,parentInjector,declarationEl);
}
export const BingMapNgFactory:import16.ComponentFactory<import4.BingMap> = new import16.ComponentFactory<import4.BingMap>('bing-map',viewFactory_BingMap_Host0,import4.BingMap);
const styles_BingMap:any[] = ['.bing-map-container-inner[_ngcontent-%COMP%] {\n      width: inherit;\n      height: inherit;\n    }\n    .bing-map-content[_ngcontent-%COMP%] {\n      display:none;\n    }'];
var renderType_BingMap:import0.RenderComponentType = (null as any);
class _View_BingMap0 extends import1.AppView<import4.BingMap> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _text_5:any;
  _text_6:any;
  constructor(viewUtils:import7.ViewUtils,parentInjector:import8.Injector,declarationEl:import2.AppElement) {
    super(_View_BingMap0,renderType_BingMap,import9.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import10.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._el_1 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_1,'class','bing-map-container-inner');
    this._text_2 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._el_3 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_3,'class','bing-map-content');
    this._text_4 = this.renderer.createText(this._el_3,'\n      ',(null as any));
    this.renderer.projectNodes(this._el_3,import7.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this._text_5 = this.renderer.createText(this._el_3,'\n    ',(null as any));
    this._text_6 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    this.init([],[
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._text_5,
      this._text_6
    ]
    ,[],[]);
    return (null as any);
  }
}
export function viewFactory_BingMap0(viewUtils:import7.ViewUtils,parentInjector:import8.Injector,declarationEl:import2.AppElement):import1.AppView<import4.BingMap> {
  if ((renderType_BingMap === (null as any))) { (renderType_BingMap = viewUtils.createRenderComponentType('C:/Projects/git/youjustgo/ng2-bingmaps/src/directives/bing-map.ts class BingMap - inline template',1,import15.ViewEncapsulation.Emulated,styles_BingMap,{})); }
  return new _View_BingMap0(viewUtils,parentInjector,declarationEl);
}